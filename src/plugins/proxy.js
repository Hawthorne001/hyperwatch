const { Map } = require('immutable');
const proxyaddr = require('proxy-addr');

const ipRanges = {
  cloudflare: [
    '103.21.244.0/22',
    '103.22.200.0/22',
    '103.31.4.0/22',
    '104.16.0.0/12',
    '108.162.192.0/18',
    '131.0.72.0/22',
    '141.101.64.0/18',
    '162.158.0.0/15',
    '172.64.0.0/13',
    '173.245.48.0/20',
    '188.114.96.0/20',
    '190.93.240.0/20',
    '197.234.240.0/22',
    '198.41.128.0/17',
    '199.27.128.0/21',
    '2400:cb00::/32',
    '2405:8100::/32',
    '2405:b500::/32',
    '2606:4700::/32',
    '2803:f800::/32',
  ],
  cloudfront: [
    '13.32.0.0/15',
    '13.54.63.128/26',
    '34.195.252.0/24',
    '35.162.63.192/26',
    '35.167.191.128/26',
    '52.15.127.128/26',
    '52.46.0.0/18',
    '52.52.191.128/26',
    '52.56.127.0/25',
    '52.57.254.0/24',
    '52.66.194.128/26',
    '52.78.247.128/26',
    '52.84.0.0/15',
    '52.199.127.192/26',
    '52.212.248.0/26',
    '52.220.191.0/26',
    '52.222.128.0/17',
    '54.182.0.0/16',
    '54.192.0.0/16',
    '54.230.0.0/16',
    '54.233.255.128/26',
    '54.239.128.0/18',
    '54.239.192.0/19',
    '54.240.128.0/18',
    '204.246.164.0/22',
    '204.246.168.0/22',
    '204.246.174.0/23',
    '204.246.176.0/20',
    '205.251.192.0/19',
    '205.251.249.0/24',
    '205.251.250.0/23',
    '205.251.252.0/23',
    '205.251.254.0/24',
    '216.137.32.0/19',
  ],
  cloudproxy: ['192.88.134.0/23', '185.93.228.0/22', '66.248.200.0/22'],
  incapsula: [
    '199.83.128.0/21',
    '198.143.32.0/19',
    '149.126.72.0/21',
    '103.28.248.0/22',
    '45.64.64.0/22',
    '185.11.124.0/22',
    '192.230.64.0/18',
    '107.154.0.0/16',
    '45.60.0.0/16',
    '45.223.0.0/16',
    '2a02:e980::/29',
  ],
};

const trusted = ['loopback', 'linklocal', 'uniquelocal'].concat(
  ...Object.values(ipRanges)
);

/**
 * Detect the actual IP address, ignoring the proxies.
 */
function detectAddress(remoteAddress, headers) {
  let address = remoteAddress;

  if (headers.has('x-forwarded-for')) {
    address = proxyaddr(
      {
        headers: headers.toJS(),
        connection: { remoteAddress: remoteAddress },
      },
      trusted
    );
  }

  return Map({ value: address });
}

module.exports = {
  detectAddress: detectAddress,
};
