[
  {
    "regex": "(Applebot)/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Ahrefs)Bot/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(ia_archiver)/(\\d+)\\.(\\d+)",
    "family_replacement": "Alexa"
  },
  {
    "regex": "(archive\\.org_bot)",
    "family_replacement": "Archive.org"
  },
  {
    "regex": "(special_archiver)/(\\d+)\\.(\\d+)\\.(\\d+)",
    "family_replacement": "Archive.org"
  },
  {
    "regex": "(Archive-It)"
  },
  {
    "regex": "(Cliqzbot)/(\\d+)\\.(\\d+)",
    "family_replacement": "Cliqz"
  },
  {
    "regex": "(CloudFlare)-AlwaysOnline/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(coccocbot)/(\\d+)\\.(\\d+)",
    "family_replacement": "Coc Coc"
  },
  {
    "regex": "(coccocbot-web)/(\\d+)\\.(\\d+)",
    "family_replacement": "Coc Coc"
  },
  {
    "regex": "(coccocbot-image)/(\\d+)\\.(\\d+)",
    "family_replacement": "Coc Coc"
  },
  {
    "regex": "(Baidu)spider/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Baidu)spider-render/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Baidu)spider-image/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Baidu)spider-image"
  },
  {
    "regex": "(bingbot)/(\\d+)\\.(\\d+)",
    "family_replacement": "Bing"
  },
  {
    "regex": "(Bing)Preview/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Discord)bot/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(DotBot)/(\\d+)\\.(\\d+)",
    "family_replacement": "Moz"
  },
  {
    "regex": "(DuckDuckBot)-Https/(\\d+)\\.(\\d+)",
    "family_replacement": "DuckDuckGo"
  },
  {
    "regex": "(DuckDuckBot)-Favicons-Bot/(\\d+)\\.(\\d+)",
    "family_replacement": "DuckDuckGo"
  },
  {
    "regex": "(facebookexternalhit)/(\\d+)\\.(\\d+)",
    "family_replacement": "Facebook"
  },
  {
    "regex": "(Googlebot)/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Googlebot)-Image/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "Google.*/\\+/web/snippet",
    "family_replacement": "Google Plus"
  },
  {
    "regex": "(GoogleDocs)",
    "family_replacement": "Google Docs"
  },
  {
    "regex": "Mediapartners-(Google)"
  },
  {
    "regex": "(Google Favicon)"
  },
  {
    "regex": "(GoogleImageProxy)",
    "family_replacement": "Google Image Proxy"
  },
  {
    "regex": "(LinkedIn)Bot/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Mail\\.RU_Bot)/(\\d+)\\.(\\d+)",
    "family_replacement": "Mail.RU"
  },
  {
    "regex": "(MJ12bot)/v(\\d+)\\.(\\d+)\\.(\\d+)",
    "family_replacement": "Majestic"
  },
  {
    "regex": "(Mojeek)Bot/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Pinterest)bot/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Semrush)Bot/(\\d+)"
  },
  {
    "regex": "(Semrush)Bot"
  },
  {
    "regex": "(Seznam)Bot/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Slack)bot-LinkExpanding (\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Sogou) web spider/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Sogou) Pic Spider/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Twitter)bot/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "yacybot",
    "family_replacement": "YaCy"
  },
  {
    "regex": "Yahoo! Slurp",
    "family_replacement": "Yahoo"
  },
  {
    "regex": "Yahoo Link Preview",
    "family_replacement": "Yahoo"
  },
  {
    "regex": "(Yandex)Bot/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Yandex)MobileBot/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Yandex)Images/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Yandex)AccessibilityBot/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Yeti)/(\\d+)\\.(\\d+)",
    "family_replacement": "Naver"
  },
  {
    "regex": "(Yisou)Spider/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Yisou)Spider"
  },
  {
    "regex": "(ArchiveTeam) ArchiveBot/(\\d+)"
  },
  {
    "regex": "(Artifactory)/(\\d+)\\.(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Awario)SmartBot/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(BarkRowler)/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(bitlybot)/(\\d+)\\.(\\d+)",
    "family_replacement": "Bitly"
  },
  {
    "regex": "(BLEXBot)/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Bytespider)"
  },
  {
    "regex": "(Buck)/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Cincraw)/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(heritrix)/(\\d+)\\.(\\d+)\\.(\\d+)",
    "family_replacement": "Heritrix"
  },
  {
    "regex": "(Linkbot) (\\d+)\\.(\\d+)"
  },
  {
    "regex": "(linkdexbot)/(\\d+)\\.(\\d+)",
    "family_replacement": "Linkdex"
  },
  {
    "regex": "(MagiBot)/(\\d+)\\.(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(MBCrawler)/(\\d+)\\.(\\d+)",
    "family_replacement": "Monitor Backlinks"
  },
  {
    "regex": "(PaperLi)Bot/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(PetalBot)"
  },
  {
    "regex": "proximic",
    "family_replacement": "Proximic"
  },
  {
    "regex": "(Qwant)ify/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Raven)Crawler/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Riddler)"
  },
  {
    "regex": "(Semanticbot)/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Serendeputy)Bot/(\\d+)\\.(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Scrapy)/(\\d+)\\.(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Telegram)Bot"
  },
  {
    "regex": "(Tweetmeme)Bot/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(YaK)/(\\d+)\\.(\\d+)",
    "family_replacement": "Linkfluence"
  },
  {
    "regex": "HggH PhantomJS Screenshoter"
  },
  {
    "regex": "(WordPress.com mShots)"
  },
  {
    "regex": "github-camo",
    "family_replacement": "GitHub Camo"
  },
  {
    "regex": "(Camo Asset Proxy) (\\d+)\\.(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(go-camo)"
  },
  {
    "regex": "Slack-ImgProxy",
    "family_replacement": "Slack ImgProxy"
  },
  {
    "regex": "(brokenlinkcheck\\.com)/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(broken-link-checker)/(\\d+)\\.(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Hyperlink) v(\\d+)\\.(\\d+)\\.(\\d+)"
  },
  {
    "regex": "LinkCheck by Siteimprove\\.com",
    "family_replacement": "Siteimprove"
  },
  {
    "regex": "(textlint-rule-no-dead-link)/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Pingdom)\\.com_bot_version_(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(PingdomPageSpeed)/(\\d+)\\.(\\d+)",
    "family_replacement": "Pingdom Page Speed"
  },
  {
    "regex": "(PTST)/(\\d+)\\.(\\d+)",
    "family_replacement": "WebPageTest.org"
  },
  {
    "regex": "HappyApps-WebCheck",
    "family_replacement": "Happy Apps"
  },
  {
    "regex": "(UptimeRobot)/(\\d+)\\.(\\d+)",
    "family_replacement": "Uptime Robot"
  },
  {
    "regex": "(Superhuman)"
  },
  {
    "regex": "(YahooMailProxy)"
  },
  {
    "regex": "(axios)/(\\d+)\\.(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(fasthttp)"
  },
  {
    "regex": "(Go-http-client)/(\\d+)\\.(\\d+)",
    "family_replacement": "Go HTTP Client"
  },
  {
    "regex": "(Go) (\\d+)\\.(\\d+) package http",
    "family_replacement": "Go http package"
  },
  {
    "regex": "(got) "
  },
  {
    "regex": "(GuzzleHttp)/(\\d+)\\.(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(http\\.rb)/(\\d+)\\.(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Java)/(\\d+)\\.(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(lua-resty-http)/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Needle)/(\\d+)\\.(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(node-fetch)/(\\d+)\\.(\\d+)",
    "family_replacement": "Node Fetch"
  },
  {
    "regex": "(okhttp)/(\\d+)\\.(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(python-requests)/(\\d+)\\.(\\d+)\\.(\\d+)",
    "family_replacement": "Python Requests"
  },
  {
    "regex": "(request)/(\\d+)\\.(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(HelloWorks)"
  },
  {
    "regex": "(mailgun)",
    "family_replacement": "Mailgun"
  },
  {
    "regex": "(Stripe)/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(TransferWise)-Webhook/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(sentry)/(\\d+)\\.(\\d+)\\.(\\d+)",
    "family_replacement": "Sentry"
  },
  {
    "regex": "(360Spider)"
  },
  {
    "regex": "(adreview)/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(AHC)/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(AppEngine-Google)",
    "family_replacement": "Google App Engine"
  },
  {
    "regex": "(ArchiveBox)"
  },
  {
    "regex": "(CATExplorador)/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(cortex)/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(CyotekWebCopy)/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(crawler4j)"
  },
  {
    "regex": "(Datanyze)"
  },
  {
    "regex": "(Drupal)"
  },
  {
    "regex": "(eCairn-Grabber)/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Embedly)/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Embedly)"
  },
  {
    "regex": "(e.ventures) Investment Crawler"
  },
  {
    "regex": "(Feed43) Proxy/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "Google-Apps-Script",
    "family_replacement": "Google Apps Script"
  },
  {
    "regex": "(HTML Proofer)/(\\d+)\\.(\\d+).(\\d+)"
  },
  {
    "regex": "(Hexometer)"
  },
  {
    "regex": "(HTTrack) (\\d+)\\.(\\d+)"
  },
  {
    "regex": "(ImageOptim)/(\\d+)\\.(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(ltx71)"
  },
  {
    "regex": "(Mastodon)/(\\d+)\\.(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(MeorcaBot)"
  },
  {
    "regex": "(Mediatoolkit)bot"
  },
  {
    "regex": "(Misskey)/(\\d+)\\.(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(MS Search) (\\d+)\\.(\\d+)"
  },
  {
    "regex": "(MuckRack)/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(newspaper)/(\\d+)\\.(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Nimbostratus)-Bot/v(\\d+)\\.(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(npm)/(\\d+)\\.(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Nuzzel)"
  },
  {
    "regex": "(ocPortal)"
  },
  {
    "regex": "(Package Control)"
  },
  {
    "regex": "(Pleroma)"
  },
  {
    "regex": "(Prerender)"
  },
  {
    "regex": "(Refindbot)/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "^(Ruby)$"
  },
  {
    "regex": "(Scoop\\.it)"
  },
  {
    "regex": "(Screaming Frog SEO Spider)/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(seocompany\\.store)"
  },
  {
    "regex": "(SEOkicks)"
  },
  {
    "regex": "(seoscanners\\.net)/(\\d+)\\.(\\d+)",
    "family_replacement": "Seoscanners.net"
  },
  {
    "regex": "(Sirportly)"
  },
  {
    "regex": "(Shields.io)"
  },
  {
    "regex": "(Summaly)Bot/(\\d+)\\.(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(summaly)/(\\d+)\\.(\\d+)\\.(\\d+)",
    "family_replacement": "Summaly"
  },
  {
    "regex": "(Synapse)/(\\d+)\\.(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Test Certificate Info)"
  },
  {
    "regex": "(The Knowledge AI)"
  },
  {
    "regex": "(The Lounge IRC Client)"
  },
  {
    "regex": "\\+http:\\/\\/tweetedtimes\\.com",
    "family_replacement": "The Tweeted Times"
  },
  {
    "regex": "(Trakkin)/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(TrendsmapResolver)/(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(Triplebyte)"
  },
  {
    "regex": "(vkShare)"
  },
  {
    "regex": "(Wappalyzer)"
  },
  {
    "regex": "(WordPress)/(\\d+)\\.(\\d+)\\.(\\d+)"
  },
  {
    "regex": "(XenForo)/(\\d+)"
  }
]
